{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","width","height","latitude","longitude","zoom","viewport","setViewport","selectedStore","setSelectedStore","useEffect","listener","e","key","window","addEventListener","removeEventListener","mapboxApiAccessToken","process","mapStyle","onViewportChange","myStore","map","store","STORENAME","OBJECTID","Y","X","className","onClick","preventDefault","src","alt","onClose","ADDRESS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"w7OAoIeA,MA9Hf,WAAgB,IAAD,EACmBC,mBAAS,CACvCC,MAAO,QACPC,OAAQ,QACRC,SAAU,QACVC,WAAY,QACZC,KAAM,IANK,mBACNC,EADM,KACIC,EADJ,OAS8BP,mBAAS,MATvC,mBASLQ,EATK,KASUC,EATV,KAwBb,OAbAC,qBAAW,WACT,IAAMC,EAAW,SAAAC,GACF,WAAVA,EAAEC,KACHJ,EAAiB,OAKrB,OAFAK,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,MAEvC,IAGD,6BACE,kBAAC,IAAD,iBAAgBL,EAAhB,CAA0BW,qBAAsBC,gGAC9CC,SAAW,uDACXC,iBAAoB,SAAAd,GAClBC,EAAYD,MAGbe,IAAkBC,KAAI,SAACC,GAAD,MAEA,YAApBA,EAAMC,UAEN,kBAAC,IAAD,CAAQX,IAAOU,EAAME,SAAUtB,SAAYoB,EAAMG,EAClDtB,UAAamB,EAAMI,GAEjB,4BAAQC,UAAW,aAAaC,QAAU,SAACjB,GACzCA,EAAEkB,iBACFrB,EAAiBc,KAEjB,yBAAKQ,IAAM,eAAeC,IAAK,YAIX,wBAApBT,EAAMC,UACT,kBAAC,IAAD,CAAQX,IAAOU,EAAME,SAAUtB,SAAYoB,EAAMG,EAChDtB,UAAamB,EAAMI,GAEjB,4BAAQC,UAAW,aAAaC,QAAU,SAACjB,GACzCA,EAAEkB,iBACFrB,EAAiBc,KAEjB,yBAAKQ,IAAM,eAAeC,IAAK,YAGb,gBAApBT,EAAMC,UACT,kBAAC,IAAD,CAAQX,IAAOU,EAAME,SAAUtB,SAAYoB,EAAMG,EAChDtB,UAAamB,EAAMI,GAEjB,4BAAQC,UAAW,aAAaC,QAAU,SAACjB,GACzCA,EAAEkB,iBACFrB,EAAiBc,KAEjB,yBAAKQ,IAAM,iBAAiBC,IAAK,YAGd,UAApBT,EAAMC,UACR,kBAAC,IAAD,CAAQX,IAAOU,EAAME,SAAUtB,SAAYoB,EAAMG,EAChDtB,UAAamB,EAAMI,GAEjB,4BAAQC,UAAW,aAAaC,QAAU,SAACjB,GACzCA,EAAEkB,iBACFrB,EAAiBc,KAEjB,yBAAKQ,IAAM,aAAaC,IAAK,YAIpC,kBAAC,IAAD,CAAQnB,IAAOU,EAAME,SAAUtB,SAAYoB,EAAMG,EAChDtB,UAAamB,EAAMI,GAEjB,4BAAQC,UAAW,aAAaC,QAAU,SAACjB,GACzCA,EAAEkB,iBACFrB,EAAiBc,KAEjB,yBAAKQ,IAAM,aAAaC,IAAK,eAmBpCxB,EACC,kBAAC,IAAD,CACEL,SAAUK,EAAckB,EACxBtB,UAAWI,EAAcmB,EACzBM,QAAW,WACTxB,EAAiB,QAGnB,6BACE,gCAAMD,EAAcgB,WACpB,+BAAKhB,EAAc0B,WAGrB,QClHQC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9784f499.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport ReactMapGL, {Marker, Popup} from 'react-map-gl';\nimport  * as myStore from \"./data/grocery.json\"\n\n\nfunction App() {\n  const [viewport, setViewport] = useState({\n    width: \"100vw\",\n    height: \"100vh\",\n    latitude: 38.9072,\n    longitude: -77.0369,\n    zoom: 9\n  });\n\n  const  [selectedStore, setSelectedStore] = useState(null);\n\n  useEffect( () => {\n    const listener = e => {\n      if(e.key === \"Escape\"){\n        setSelectedStore(null);\n      }\n    } ;\n    window.addEventListener(\"keydown\", listener);\n\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    }\n  }, []);\n\n  return (\n    <div>\n      <ReactMapGL {...viewport} mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        mapStyle = \"mapbox://styles/nazifyusof/ck94r3k0410051jo5xlpyycx5\"\n        onViewportChange = {viewport => {\n          setViewport(viewport);\n        }}\n      >\n        {myStore.storeList.map((store) => (\n\n          (store.STORENAME === \"Safeway\") ?\n\n          (<Marker key = {store.OBJECTID} latitude = {store.Y}   \n          longitude = {store.X}\n          >\n            <button className= \"marker-btn\" onClick= {(e)=>{\n              e.preventDefault();\n              setSelectedStore(store);\n            }}>\n              <img src = \"/Safeway.png\" alt =\"store\"/> \n            </button>\n          </Marker> ) \n\n          : ( store.STORENAME === \"Walmart Supercenter\" ? \n          (<Marker key = {store.OBJECTID} latitude = {store.Y}   \n            longitude = {store.X}\n            >\n              <button className= \"marker-btn\" onClick= {(e)=>{\n                e.preventDefault();\n                setSelectedStore(store);\n              }}>\n                <img src = \"/walmart.png\" alt =\"store\"/> \n              </button>\n            </Marker> )\n          :  (store.STORENAME === \"Whole Foods\" ?  \n          (<Marker key = {store.OBJECTID} latitude = {store.Y}   \n            longitude = {store.X}\n            >\n              <button className= \"marker-btn\" onClick= {(e)=>{\n                e.preventDefault();\n                setSelectedStore(store);\n              }}>\n                <img src = \"/wholefood.png\" alt =\"store\"/> \n              </button>\n            </Marker> )\n            : (store.STORENAME === \"Giant\" ?  \n            (<Marker key = {store.OBJECTID} latitude = {store.Y}   \n              longitude = {store.X}\n              >\n                <button className= \"marker-btn\" onClick= {(e)=>{\n                  e.preventDefault();\n                  setSelectedStore(store);\n                }}>\n                  <img src = \"/Giant.png\" alt =\"store\"/> \n                </button>\n              </Marker> )\n            : \n          (<Marker key = {store.OBJECTID} latitude = {store.Y}   \n            longitude = {store.X}\n            >\n              <button className= \"marker-btn\" onClick= {(e)=>{\n                e.preventDefault();\n                setSelectedStore(store);\n              }}>\n                <img src = \"/other.png\" alt =\"store\"/> \n              </button>\n            </Marker> ))))\n\n           \n\n          // <Marker key = {store.OBJECTID} latitude = {store.Y}   \n          // longitude = {store.X}\n          // >\n          //   <button className= \"marker-btn\" onClick= {(e)=>{\n          //     e.preventDefault();\n          //     setSelectedStore(store);\n          //   }}>\n          //     <img src = \"/Safeway.jpeg\" alt =\"store\"/> \n          //   </button>\n          // </Marker>\n        )\n        )}\n\n        {selectedStore ? (\n          <Popup\n            latitude={selectedStore.Y}\n            longitude={selectedStore.X}\n            onClose = {() =>{\n              setSelectedStore(null);\n            }}\n          >\n            <div>\n              <h2> {selectedStore.STORENAME}</h2>\n              <p> {selectedStore.ADDRESS}</p>\n            </div>\n          </Popup>\n        ) : null}\n      </ReactMapGL>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}